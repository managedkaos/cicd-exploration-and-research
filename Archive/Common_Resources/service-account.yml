---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Create:
    1) group with the managed policy AdministratorAccess-AWSElasticBeanstalk attached.
    2) user as a member of the group.
    3) accesskeys for user.
  Outputs:
    1) AccessKeyId
    2) SecretAccessKey
Resources:
  Group:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${AWS::StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-AWSElasticBeanstalk
  User:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub ${AWS::StackName}
      Groups:
        - !Ref Group
  Keys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}
      Roles:
        - !Ref ServiceRole
Outputs:
  AccessKeyId:
    Value: !Ref Keys
    Export:
      Name: !Sub ${AWS::StackName}-AccessKeyId
  SecretAccessKey:
    Value: !GetAtt Keys.SecretAccessKey
    Export:
      Name: !Sub ${AWS::StackName}-SecretAccessKey

